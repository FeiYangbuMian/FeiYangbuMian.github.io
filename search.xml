<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2019/10/07/live/sum-report/"/>
      <url>/2019/10/07/live/sum-report/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue2项目实战总结一</title>
      <link href="/2019/08/31/live/sum-marathon/"/>
      <url>/2019/08/31/live/sum-marathon/</url>
      
        <content type="html"><![CDATA[<h2 id="最近遇见的问题与解决方案"><a href="#最近遇见的问题与解决方案" class="headerlink" title="最近遇见的问题与解决方案"></a>最近遇见的问题与解决方案</h2><h2 id="最近遇见的问题与解决方案-1"><a href="#最近遇见的问题与解决方案-1" class="headerlink" title="最近遇见的问题与解决方案"></a>最近遇见的问题与解决方案</h2><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p><a href="https://segmentfault.com/a/1190000013071458" target="_blank" rel="noopener">vue2之axios</a></p><blockquote><p>因为本项目用的是json格式，所以未使用插件qs</p></blockquote><ol><li><figure class="highlight plain"><figcaption><span>install axios```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2. main.js中引入</span><br></pre></td></tr></table></figure></li></ol><p>import Axios from ‘axios’<br>Vue.prototype.$axios = Axios;  //在Vue的原型上添加$axios方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3. main.js中配置</span><br></pre></td></tr></table></figure><p>// 设置baseURL<br>Axios.defaults.baseURL = ‘<a href="http://192.168.20.56:8089&#39;" target="_blank" rel="noopener">http://192.168.20.56:8089&#39;</a><br>// 设置token值<br>// Axios.defaults.headers.common[‘Authorization’] = AUTH_TOKEN<br>// 请求头<br>Axios.defaults.headers.post[‘Content-Type’] = ‘application/json;charset=UTF-8’</p><p>// 添加请求拦截器<br>Axios.interceptors.request.use(function (config) {<br>  // 在发送请求之前做些什么<br>  console.log(config)<br>  return config<br>}, function (error) {<br>  // 对请求错误做些什么<br>  return Promise.reject(error)<br>})</p><p>// 添加响应拦截器<br>Axios.interceptors.response.use(function (response) {<br>  // 对响应数据做点什么<br>  return response<br>}, function (error) {<br>  // 对响应错误做点什么<br>  return Promise.reject(error)<br>})</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4. 页面中使用</span><br></pre></td></tr></table></figure><p>// post<br>this.$axios.post(‘/insertNews’, JSON.stringify(news))<br>    .then(rsp =&gt; {<br>        console.log(‘insertNews success’)<br>    })<br>    .catch(error =&gt; { console.log(error) })</p><p>// get<br>this.$axios.get(‘/selectnews’, {<br>    params: {<br>        ‘newsType’: ‘1’<br>    }<br>}).then(rsp =&gt; {<br>        _this.tableData = rsp.data.list<br>        console.log(JSON.stringify(rsp.data))<br>}).catch(error =&gt; {<br>        console.log(error)<br>    })</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### wangEditor</span><br><span class="line">[wangEditor官方文档](https://www.kancloud.cn/wangfupeng/wangeditor3/332599)</span><br><span class="line"></span><br><span class="line">[vue2+wangeditor牛刀小试](https://segmentfault.com/a/1190000016010354)</span><br><span class="line">1. ```npm install wangeditor</span><br></pre></td></tr></table></figure><ol start="2"><li><p>新增富文本组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;wangeditor&quot;&gt;</span><br><span class="line">    &lt;div ref=&quot;editorElem&quot; style=&quot;text-align:left;width: 600px&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import WE from &apos;wangeditor&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;WangEditor&apos;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      editor: null,</span><br><span class="line">      editorContent: &apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // catchData是一个类似回调函数，来自父组件，当然也可以自己写一个函数，主要是用来获取富文本编辑器中的html内容用来传递给服务端</span><br><span class="line">  // content接收初始化数据</span><br><span class="line">  props: [&apos;catchData&apos;, &apos;content&apos;], // 接收父组件的方法</span><br><span class="line">  watch: &#123;</span><br><span class="line">    content () &#123;</span><br><span class="line">      this.editor.txt.html(this.content)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    this.editor = new WE(this.$refs.editorElem)</span><br><span class="line">    // 编辑器的事件，每次改变会获取其html内容</span><br><span class="line">    this.editor.customConfig.onchange = html =&gt; &#123;</span><br><span class="line">      this.editorContent = html</span><br><span class="line">      this.catchData(this.editorContent) // 把这个html通过catchData的方法传入父组件</span><br><span class="line">    &#125;</span><br><span class="line">    this.editor.customConfig.zIndex = 2 // 修改编辑器的z-index</span><br><span class="line">    this.editor.customConfig.pasteFilterStyle = false // 关闭粘贴样式的过滤</span><br><span class="line">    this.editor.customConfig.pasteIgnoreImg = true // 粘贴时忽视图片</span><br><span class="line">    // 自定义处理粘贴的文本内容</span><br><span class="line">    this.editor.customConfig.pasteTextHandle = function (content) &#123;</span><br><span class="line">      // content 即粘贴过来的内容（html 或 纯文本），可进行自定义处理然后返回</span><br><span class="line">      if (content === &apos;&apos; &amp;&amp; !content) &#123; return &apos;&apos; &#125;</span><br><span class="line">      let str = content</span><br><span class="line">      str = str.replace(/&lt;xml&gt;[\s\S]*?&lt;\/xml&gt;/ig, &apos;&apos;)</span><br><span class="line">      str = str.replace(/&lt;style&gt;[\s\S]*?&lt;\/style&gt;/ig, &apos;&apos;)</span><br><span class="line">      str = str.replace(/&lt;\/?[^&gt;]*&gt;/g, &apos;&apos;)</span><br><span class="line">      str = str.replace(/[ | ]*\n/g, &apos;\n&apos;)</span><br><span class="line">      str = str.replace(/&amp;nbsp;/ig, &apos;&apos;)</span><br><span class="line">      return str</span><br><span class="line">    &#125;</span><br><span class="line">    this.editor.customConfig.uploadImgMaxLength = 5 // 限制一次最多上传图片个数</span><br><span class="line">    this.editor.customConfig.uploadImgShowBase64 = true // 允许上传本地图片，转为bash64或如下接口上传</span><br><span class="line">    this.editor.customConfig.uploadImgServer = &apos;http://192.168.20.56:8089/uploadImg&apos; // 你的上传图片的接口</span><br><span class="line">    this.editor.customConfig.uploadFileName = &apos;newsImages&apos; // 你自定义的文件名，默认名字</span><br><span class="line">    this.editor.customConfig.uploadImgTimeout = 6000000 // 超时时间</span><br><span class="line">    this.editor.customConfig.menus = [</span><br><span class="line">      // 菜单配置</span><br><span class="line">      &apos;head&apos;, // 标题</span><br><span class="line">      &apos;bold&apos;, // 粗体</span><br><span class="line">      &apos;fontSize&apos;, // 字号</span><br><span class="line">      // &apos;fontName&apos;, // 字体</span><br><span class="line">      &apos;italic&apos;, // 斜体</span><br><span class="line">      &apos;underline&apos;, // 下划线</span><br><span class="line">      &apos;strikeThrough&apos;, // 删除线</span><br><span class="line">      &apos;foreColor&apos;, // 文字颜色</span><br><span class="line">      // &apos;backColor&apos;, // 背景颜色</span><br><span class="line">      &apos;link&apos;, // 插入链接</span><br><span class="line">      &apos;list&apos;, // 列表</span><br><span class="line">      &apos;justify&apos;, // 对齐方式</span><br><span class="line">      // &apos;quote&apos;, // 引用</span><br><span class="line">      // &apos;emoticon&apos;, // 表情</span><br><span class="line">      &apos;image&apos;, // 插入图片</span><br><span class="line">      &apos;table&apos;, // 表格</span><br><span class="line">      // &apos;code&apos;, // 插入代码</span><br><span class="line">      &apos;undo&apos;, // 撤销</span><br><span class="line">      &apos;redo&apos; // 重复</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    // 下面是最重要的的方法</span><br><span class="line">    this.editor.customConfig.uploadImgHooks = &#123;</span><br><span class="line">      before: function (xhr, editor, files) &#123;</span><br><span class="line">        // 图片上传之前触发</span><br><span class="line">        // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象，files 是选择的图片文件</span><br><span class="line">        console.log(files)</span><br><span class="line">        // 如果返回的结果是 &#123;prevent: true, msg: &apos;xxxx&apos;&#125; 则表示用户放弃上传</span><br><span class="line">        // return &#123;</span><br><span class="line">        //     prevent: true,</span><br><span class="line">        //     msg: &apos;放弃上传&apos;</span><br><span class="line">        // &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      success: function (xhr, editor, result) &#123;</span><br><span class="line">        // 图片上传并返回结果，图片插入成功之后触发</span><br><span class="line">        // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象，result 是服务器端返回的结果</span><br><span class="line">        console.log(result)</span><br><span class="line">        this.imgUrl = result.pathmap</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: function (xhr, editor, result) &#123;</span><br><span class="line">        // 图片上传并返回结果，但图片插入错误时触发</span><br><span class="line">        // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象，result 是服务器端返回的结果</span><br><span class="line">      &#125;,</span><br><span class="line">      error: function (xhr, editor) &#123;</span><br><span class="line">        // 图片上传出错时触发</span><br><span class="line">        // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象</span><br><span class="line">      &#125;,</span><br><span class="line">      timeout: function (xhr, editor) &#123;</span><br><span class="line">        // 图片上传超时时触发</span><br><span class="line">        // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      // 如果服务器端返回的不是 &#123;errno:0, data: [...]&#125; 这种格式，可使用该配置</span><br><span class="line">      // （但是，服务器端返回的必须是一个 JSON 格式字符串！！！否则会报错）</span><br><span class="line">      customInsert: function (insertImg, result, editor) &#123;</span><br><span class="line">        // 图片上传并返回结果，自定义插入图片的事件（而不是编辑器自动插入图片！！！）</span><br><span class="line">        // insertImg 是插入图片的函数，editor 是编辑器对象，result 是服务器端返回的结果</span><br><span class="line">        // result 必须是一个 JSON 格式字符串！！！否则报错</span><br><span class="line"></span><br><span class="line">        // 举例：假如上传图片成功后，服务器端返回的是 &#123;url:&apos;....&apos;&#125; 这种格式，即可这样插入图片：</span><br><span class="line">        // let url = Object.values(result.path) // result.data就是服务器返回的图片名字和链接</span><br><span class="line">        // JSON.stringify(url) // 在这里转成JSON格式</span><br><span class="line"></span><br><span class="line">        let url = result.pathmap</span><br><span class="line">        let len = url.length</span><br><span class="line">        for (let i = 0; i &lt; len; i++) &#123;</span><br><span class="line">          insertImg(url[i].path)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.editor.create() // 创建富文本实例</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#wangeditor &#123;</span><br><span class="line">  width: 600px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>页面使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;wang-editor :catchData=&quot;catchData&quot; :content=&quot;form.newsContent&quot;&gt;&lt;/wang-editor&gt;</span><br><span class="line"></span><br><span class="line"> methods: &#123;</span><br><span class="line">    catchData (value) &#123;</span><br><span class="line">      console.log(value)</span><br><span class="line">      this.content = value // 在这里接受子组件传过来的参数，赋值给data里的参数</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="vue-amap"><a href="#vue-amap" class="headerlink" title="vue-amap"></a>vue-amap</h3><p><a href="https://elemefe.github.io/vue-amap/#/zh-cn/introduction/install" target="_blank" rel="noopener">vue2调用高德地图(Amap)及其UI组件</a></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p><a href="https://www.cnblogs.com/ykCoder/p/11022572.html" target="_blank" rel="noopener">Vue项目打包部署到apache服务器</a></p><ol><li><p>后端foldername项目</p></li><li><p>router index.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base: &apos;/foldername/&apos;,</span><br></pre></td></tr></table></figure></li><li><p>config index.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assetsPublicPath: &apos;/foldername/&apos;</span><br></pre></td></tr></table></figure></li><li><p>foldername项目下新建.htaccess</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mui的一些实战</title>
      <link href="/2019/08/19/live/study-mui/"/>
      <url>/2019/08/19/live/study-mui/</url>
      
        <content type="html"><![CDATA[<p>最近在用mui做一款app,在此总结遇见的问题 解决方案<br>所用工具: HBuilderX H5+App 底部选项卡模板</p><!-- 阅读更多 --><h2 id="底部选项卡"><a href="#底部选项卡" class="headerlink" title="底部选项卡"></a>底部选项卡</h2><h3 id="util-js"><a href="#util-js" class="headerlink" title="util.js"></a>util.js</h3><p>创建成功后js文件夹下有util.js文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//util.js</span><br><span class="line">var util = &#123;</span><br><span class="line">options: &#123;</span><br><span class="line">&lt;!-- 选项卡被选中的颜色 --&gt;</span><br><span class="line">ACTIVE_COLOR: &quot;#007aff&quot;,</span><br><span class="line">&lt;!-- 选项卡未被选中的颜色 --&gt;</span><br><span class="line">NORMAL_COLOR: &quot;#000&quot;,</span><br><span class="line">&lt;!-- 选项卡对应的页面 --&gt;</span><br><span class="line">subpages: [&quot;html/tab-webview-subpage-chat.html&quot;, &quot;html/tab-webview-subpage-contact.html&quot;]</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line">initSubpage: function(aniShow) &#123;</span><br><span class="line">var subpage_style = &#123;</span><br><span class="line">top: 0,</span><br><span class="line">&lt;!-- 底部选项卡高度，建议改为50，51会页面穿透 --&gt;</span><br><span class="line">bottom: 51</span><br><span class="line">&#125;,</span><br><span class="line">subpages = util.options.subpages,</span><br><span class="line">self = plus.webview.currentWebview(),</span><br><span class="line">temp = &#123;&#125;;</span><br><span class="line">...</span><br><span class="line">toggleNview: function(currIndex) &#123;</span><br><span class="line">currIndex = currIndex * 2;</span><br><span class="line">// 重绘当前tag 包括icon和text，所以执行两个重绘操作</span><br><span class="line">util.updateSubNView(currIndex, util.options.ACTIVE_COLOR);</span><br><span class="line">util.updateSubNView(currIndex + 1, util.options.ACTIVE_COLOR);</span><br><span class="line">// 重绘兄弟tag 反之排除当前点击的icon和text</span><br><span class="line">&lt;!-- 默认底部选项卡是4个选项，于是为8，若选项卡数目变化，相应i最大值也要修改 --&gt;</span><br><span class="line">for(var i = 0; i &lt; 8; i++) &#123;</span><br><span class="line">if(i !== currIndex &amp;&amp; i !== currIndex + 1) &#123;</span><br><span class="line">util.updateSubNView(i, util.options.NORMAL_COLOR);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a>manifest.json</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// manifest.json</span><br><span class="line">&quot;plus&quot;: &#123;</span><br><span class="line">&quot;launchwebview&quot;: &#123;</span><br><span class="line">&quot;bottom&quot;: &quot;0px&quot;,</span><br><span class="line">&lt;!-- 底部选项卡背景颜色 --&gt;</span><br><span class="line">&quot;background&quot;: &quot;#fff&quot;,</span><br><span class="line">&quot;subNViews&quot;: [</span><br><span class="line">&#123;</span><br><span class="line">&quot;id&quot;: &quot;tabBar&quot;,</span><br><span class="line">&quot;styles&quot;: &#123;</span><br><span class="line">&quot;bottom&quot;: &quot;0px&quot;,</span><br><span class="line">&quot;left&quot;: &quot;0&quot;,</span><br><span class="line">&quot;height&quot;: &quot;50px&quot;,</span><br><span class="line">&quot;width&quot;: &quot;100%&quot;,</span><br><span class="line">&quot;backgroundColor&quot;: &quot;#fff&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;tags&quot;: [</span><br><span class="line">&#123;</span><br><span class="line">&quot;tag&quot;: &quot;font&quot;,</span><br><span class="line">&quot;id&quot;: &quot;indexIcon&quot;,</span><br><span class="line">&lt;!-- text放图标，图标可在官网查，然后再mui.css中查找对应的字符，替换掉\u后的字符 --&gt;</span><br><span class="line">&quot;text&quot;: &quot;\ue500&quot;,</span><br><span class="line">&quot;position&quot;: &#123;</span><br><span class="line">&quot;top&quot;: &quot;4px&quot;,</span><br><span class="line">&quot;left&quot;: &quot;0&quot;,</span><br><span class="line">&lt;!-- 25%是四个选项卡 --&gt;</span><br><span class="line">&quot;width&quot;: &quot;25%&quot;,</span><br><span class="line">&quot;height&quot;: &quot;24px&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;textStyles&quot;: &#123;</span><br><span class="line">&quot;fontSrc&quot;: &quot;_www/fonts/mui.ttf&quot;,</span><br><span class="line">&quot;align&quot;: &quot;center&quot;,</span><br><span class="line">&quot;size&quot;: &quot;24px&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">&quot;tag&quot;: &quot;font&quot;,</span><br><span class="line">&quot;id&quot;: &quot;indexText&quot;,</span><br><span class="line">&quot;text&quot;: &quot;首页&quot;,</span><br><span class="line">&quot;position&quot;: &#123;</span><br><span class="line">&quot;top&quot;: &quot;23px&quot;,</span><br><span class="line">&quot;left&quot;: &quot;0&quot;,</span><br><span class="line">&quot;width&quot;: &quot;25%&quot;,</span><br><span class="line">&quot;height&quot;: &quot;24px&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;textStyles&quot;: &#123;</span><br><span class="line">&quot;align&quot;: &quot;center&quot;,</span><br><span class="line">&quot;size&quot;: &quot;10px&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="弹出框"><a href="#弹出框" class="headerlink" title="弹出框"></a>弹出框</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;li class=&quot;mui-table-view-cell&quot;&gt;</span><br><span class="line">&lt;!-- href锚点 点击显示弹出框 --&gt;</span><br><span class="line">&lt;a class=&quot;mui-navigate-right&quot; href=&quot;#namePopover&quot;&gt;</span><br><span class="line">昵称</span><br><span class="line">&lt;span class=&quot;mui-pull-right gray-big mr20&quot;&gt;一个测试的账号&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 弹出框内容 --&gt;</span><br><span class="line">&lt;div id=&quot;namePopover&quot; class=&quot;mui-popover&quot;&gt;</span><br><span class="line">&lt;div class=&quot;mui-popover-arrow mui-hidden&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;form class=&quot;mui-input-group input-group&quot;&gt;</span><br><span class="line">&lt;label class=&quot;dark-big&quot;&gt;昵称编辑&lt;/label&gt;</span><br><span class="line">&lt;div class=&quot;mui-input-row&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;mui-input-clear gray-big&quot; placeholder=&quot;请输入新昵称&quot; value=&quot;一个测试的账号&quot; autofocus=&quot;autofocus&quot; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;mui-button-row&quot; style=&quot;text-align: right;margin-top: 10px;&quot;&gt;</span><br><span class="line">&lt;a href=&quot;&quot; class=&quot;green-big cancel&quot;&gt;取消&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;&quot; class=&quot;green-big confirm&quot;&gt;确认&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="图片浏览"><a href="#图片浏览" class="headerlink" title="图片浏览"></a>图片浏览</h2><p>需要mui.css, mui.js, mui.previewimage.css, mui.previewimage.js<br>其中mui.previewimage.css是从mui样例imageviewer.html文件的style中复制成的单独css文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;login.jpg&quot; id=&quot;head-img&quot; data-preview-src=&quot;&quot; data-preview-group=&quot;1&quot; /&gt;</span><br><span class="line"></span><br><span class="line">mui.previewImage(); //图片预览</span><br></pre></td></tr></table></figure><h2 id="图片裁剪"><a href="#图片裁剪" class="headerlink" title="图片裁剪"></a>图片裁剪</h2>]]></content>
      
      
      <categories>
          
          <category> mui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECMAScript中引用类型</title>
      <link href="/2019/07/15/live/JObject/"/>
      <url>/2019/07/15/live/JObject/</url>
      
        <content type="html"><![CDATA[<p>基本类型值是按值访问的：基本数据类型，为Null，Undefined，Number，Boolean，String，Symbol。值保存在栈内存中。<br>引用类型值是按引用访问的：复杂数据类型，为Object。一切皆是对象。可以添加属性和方法，也可以改变和删除其属性和方法。值保存在堆内存中。</p><!-- 阅读更多 --><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>基本类型值是按值访问的：基本数据类型，为Null，Undefined，Number，Boolean，String，Symbol。值保存在栈内存中。 引用类型值是按引用访问的：复杂数据类型，为Object。一切皆是对象。可以添加属性和方法，也可以改变和删除其属性和方法。值保存在堆内存中。</p><h3 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h3><ul><li>toLocaleString()</li><li>toString()</li><li>valueOf()</li><li>join() 数组元素用某个字符连接成字符串</li></ul><h3 id="栈方法"><a href="#栈方法" class="headerlink" title="栈方法"></a>栈方法</h3><ul><li>push() 在数组最后增加元素，可多参 </li><li>pop() 删除数组最后面一个元素，无参</li></ul><h3 id="队列方法"><a href="#队列方法" class="headerlink" title="队列方法"></a>队列方法</h3><ul><li>shift() 删除数组最前面一个元素，无参</li><li>unshift() 在数组前面增加元素，可多参 </li></ul><h3 id="重排序方法"><a href="#重排序方法" class="headerlink" title="重排序方法"></a>重排序方法</h3><blockquote><p>返回值是经过排序之后的数组。</p></blockquote><ul><li>reverse() 反转</li><li>sort() 排序</li></ul><h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><ul><li>concat() 把当前数组与另一个数组连接起来 返回新数组</li><li>slice()  截取数组索引区域[l,r) 返回新数组 </li><li>splice() 增/删数组中元素<ul><li>arr.splice(index,howmany,item1…itemX)</li><li>删除从 index 处开始的零个或多个元素，</li><li>并且用参数列表中声明的一个或多个值来替换那些被删除的元素。</li><li>规定增删项目的位置，要删除的项目数量，向数组添加的新项目</li><li>arr为最后结果，arr.splice(…)为删除的结果</li></ul></li></ul><h3 id="位置方法"><a href="#位置方法" class="headerlink" title="位置方法"></a>位置方法</h3><ul><li>indexOf() 从后往前搜索指定元素的索引号</li><li>lastIndexOf() 从后往前搜索指定元素的索引号</li></ul><h3 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h3><blockquote><p>对数组中的每一项运行给定函数。</p></blockquote><ul><li>every()<ul><li>对数组中的每一项运行给定函数。每一项返回true，就返回true</li></ul></li><li>some()<ul><li>对数组中的每一项运行给定函数。任一项返回true，就返回true</li></ul></li><li>filter()<ul><li>对数组中的每一项运行给定函数。返回true的项组成的数组</li></ul></li><li>forEach()<ul><li>对数组中的每一项运行给定函数。无返回值</li></ul></li><li>map()<ul><li>对数组中的每一项运行给定函数。返回每次函数调用的结果组成的数组</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">function(item,index,arr)&#123;&#125;</span><br><span class="line">// item 当前元素值（必选），index当前元素索引，arr此数组</span><br></pre></td></tr></table></figure><h3 id="归并方法"><a href="#归并方法" class="headerlink" title="归并方法"></a>归并方法</h3><ul><li>reduce()</li><li>reduceRight()</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记三：Render函数</title>
      <link href="/2019/07/10/live/study-vue2/"/>
      <url>/2019/07/10/live/study-vue2/</url>
      
        <content type="html"><![CDATA[<h2 id="Render函数"><a href="#Render函数" class="headerlink" title="Render函数"></a>Render函数</h2><p>渲染函数</p><h3 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h3><ul><li>Vue 通过建立一个虚拟 DOM 来追踪自己要如何改变真实 DOM，提升渲染性能。</li><li>Render函数用于实现虚拟DOM</li><li>Virtual Dom是一个轻量级的JavaScript对象，状态变化时进行Diff算法</li><li>Virtual Dom基于JavaScript计算</li><li>“虚拟节点 (virtual node)”，简写为“VNode”。“虚拟 DOM”是由 Vue 组件树建立起来的整个 VNode 树的称呼。</li></ul><!-- 阅读更多 --><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render: function (createElement) &#123;</span><br><span class="line">  return createElement(&apos;h1&apos;, this.blogTitle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="createElement"><a href="#createElement" class="headerlink" title="createElement"></a>createElement</h3><p>Render函数通过createElement参数来创建Virtual Dom</p><ul><li>参数一必选，HTML标签、组件或函数<ul><li>{String | Object | Function}</li></ul></li><li>参数二可选，对应属性的数据对象<ul><li>{Object}</li></ul></li><li>参数三可选，子节点<ul><li>{String | Array}</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记二：组件、自定义指令</title>
      <link href="/2019/07/06/live/study_vue1/"/>
      <url>/2019/07/06/live/study_vue1/</url>
      
        <content type="html"><![CDATA[<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul><li>component</li><li>组件名推荐使用小写加减号分割形式命名</li><li>组件注册必须在Vue实例申明之前</li><li>每个组件必须只有一个根元素</li></ul><!-- 阅读更多 --><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;my-component&apos;,&#123;</span><br><span class="line">    // 选项</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>局部注册组件使用components选项。只在实例作用域下有效。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let vm = new Vue(&#123;</span><br><span class="line">    el:&apos;#vm&apos;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        template:&apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><ul><li>name选项，可用来递归</li><li>data选项，必须是函数，返回对象数据</li><li>computed</li><li>methods</li><li>props选项，声明需要从父级接收的数据<ul><li>父组件向子组件传数据</li><li>值为字符串数组或对象</li><li>驼峰命名的props名称，DOM上改为短横分隔命名</li><li>值为对象时，k为名称，v为类型</li><li>v-bind动态绑定props值</li></ul></li></ul><h3 id="父子通信"><a href="#父子通信" class="headerlink" title="父子通信"></a>父子通信</h3><p>props</p><blockquote><p>在组件中，使用选项props来声明需要从父级接收的数据，props的值可以是两种，一种是字符串数组，一种是对象。</p></blockquote><blockquote><p>props中声明的数据与组件data函数return的数据的主要区别就是props的来自父级，而data中的是组件自己的数据，作用域是组件本身，这两种数据都可以在模板template及计算属性computed和方法methods中使用。</p></blockquote><blockquote><p>由于HTML特性不区分大小写，当使用DOM模板时，驼峰命名（）的props名称要转为短横分割命名（kebab-case）。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;vm&quot;&gt;</span><br><span class="line">&lt;huahua say=&quot;hello&quot;&gt;&lt;/huahua&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">Vue.component(&apos;huahua&apos;,&#123;</span><br><span class="line">props:[&apos;say&apos;],</span><br><span class="line">template:`&lt;div&gt;huahua:&#123;&#123;say&#125;&#125;&lt;/div&gt;`,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="子父通信"><a href="#子父通信" class="headerlink" title="子父通信"></a>子父通信</h3><p>.$emit(自定义的事件名,携带的数据)<br>.$on(自定义的事件名,回调函数)</p><blockquote><p>子组件用$emit()来触发事件，父组件用$on()来监听子组件的事件。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;vm&quot;&gt;</span><br><span class="line">&lt;for-show @show=&quot;show_num&quot;&gt;&lt;/for-show&gt;</span><br><span class="line">&lt;p v-if=&quot;iftrue&quot;&gt;余额：55元&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(&apos;for-show&apos;,&#123;</span><br><span class="line">template:`&lt;div&gt;&lt;button @click=&quot;on_click&quot;&gt;显示余额&lt;/button&gt;&lt;/div&gt;`,</span><br><span class="line">methods:&#123;</span><br><span class="line">on_click:function () &#123;</span><br><span class="line">this.$emit(&apos;show&apos;,&#123;a:2&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">let vm = new Vue(&#123;</span><br><span class="line">el:&apos;#vm&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">iftrue:false</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">show_num:function (data) &#123;</span><br><span class="line">console.log(data);</span><br><span class="line">this.iftrue = true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="非父子通信"><a href="#非父子通信" class="headerlink" title="非父子通信"></a>非父子通信</h3><p>父子、兄弟、跨级通信</p><ol><li>创建一个空的Vue实例，作为中央事件总线bus</li><li>全局定义组件</li><li>创建Vue实例，在mounted钩子函数里监听来自bus的事件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// 例子1</span><br><span class="line">&lt;div id=&quot;vm&quot;&gt;</span><br><span class="line">&lt;comp-txt&gt;&lt;/comp-txt&gt;</span><br><span class="line">&#123;&#123;message&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">let bus = new Vue();</span><br><span class="line">Vue.component(&apos;comp-txt&apos;,&#123;</span><br><span class="line">template:`&lt;div&gt;</span><br><span class="line">&lt;button @click=&quot;on_click&quot; &gt;传递事件&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;`,</span><br><span class="line">methods:&#123;</span><br><span class="line">on_click: function () &#123;</span><br><span class="line">bus.$emit(&apos;on_message&apos;,this.txt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">data: function () &#123;</span><br><span class="line">return &#123;</span><br><span class="line">txt:&apos;hello world&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">let vm = new Vue(&#123;</span><br><span class="line">el:&apos;#vm&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">message:&apos;&apos;</span><br><span class="line">&#125;,</span><br><span class="line">mounted: function () &#123;</span><br><span class="line">let _this = this;</span><br><span class="line">bus.$on(&apos;on_message&apos;,function(msg)&#123;</span><br><span class="line">_this.message=msg;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// 例子2</span><br><span class="line">&lt;div id=&quot;vm&quot;&gt;</span><br><span class="line">&lt;say&gt;&lt;/say&gt;</span><br><span class="line">&lt;saied&gt;&lt;/saied&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">let bus = new Vue();</span><br><span class="line">Vue.component(&apos;say&apos;,&#123;</span><br><span class="line">template:`&lt;div&gt;</span><br><span class="line">他在说:&lt;input type=&quot;text&quot; @keyup=&quot;saying&quot; v-model=&quot;he_say&quot; /&gt;</span><br><span class="line">&lt;/div&gt;`,</span><br><span class="line">methods:&#123;</span><br><span class="line">saying:function () &#123;</span><br><span class="line">bus.$emit(&apos;say_what&apos;,this.he_say);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">data: function () &#123;</span><br><span class="line">return &#123;</span><br><span class="line">he_say:&apos;&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">Vue.component(&apos;saied&apos;,&#123;</span><br><span class="line">template:`&lt;div&gt;</span><br><span class="line">他说了:&#123;&#123;msg&#125;&#125;</span><br><span class="line">&lt;/div&gt;`,</span><br><span class="line">data: function () &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg:&apos;&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted:function () &#123;</span><br><span class="line">let _this = this;</span><br><span class="line">bus.$on(&apos;say_what&apos;,function (data) &#123;</span><br><span class="line">// this指向bus</span><br><span class="line">_this.msg = data;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">let vm = new Vue(&#123;</span><br><span class="line">el:&apos;#vm&apos;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p>内容分发，用到slot</p><blockquote><p>Vue组件3个API来源：props传递数据、events触发事件、slot内容分发</p><ul><li>插槽内可以包含任何模板代码，包括 HTML</li><li>插槽内也可以包含其它的组件</li></ul></blockquote><blockquote><p>父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;vm&quot;&gt;</span><br><span class="line">&lt;comp-txt&gt;&lt;p&gt;父组件的内容&lt;/p&gt;&lt;/comp-txt&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(&apos;comp-txt&apos;,&#123;</span><br><span class="line">    template:`&lt;div&gt;&lt;slot&gt;&lt;p&gt;父组件没有内容&lt;/p&gt;&lt;/slot&gt;&lt;/div&gt;`</span><br><span class="line">&#125;);</span><br><span class="line">let vm = new Vue(&#123;</span><br><span class="line">    el:&apos;#vm&apos;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><p><slot> 元素有一个特殊的特性：name。这个特性可以用来定义额外的插槽。</slot></p><p>在向具名插槽提供内容的时候，可以在一个 <template> 元素上使用 v-slot 指令，并以 v-slot 的参数的形式提供其名称。</template></p><p><code>v-slot:</code> 有参数时可缩写为 <code>#</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;vm&quot;&gt;</span><br><span class="line">&lt;comp-child&gt;</span><br><span class="line">&lt;template #header&gt;</span><br><span class="line">            &lt;h1&gt;标题&lt;/h1&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;!-- &lt;h2 slot=&quot;header&quot;&gt;标题&lt;/h2&gt; --&gt;</span><br><span class="line">&lt;p&gt;正文&lt;/p&gt;</span><br><span class="line">&lt;p&gt;还是正文&lt;/p&gt;</span><br><span class="line">    &lt;template v-slot:footer&gt;</span><br><span class="line">            &lt;p&gt;底部&lt;/p&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;!-- &lt;p slot=&quot;footer&quot;&gt;底部&lt;/p&gt; --&gt;</span><br><span class="line">&lt;/comp-child&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(&apos;comp-child&apos;, &#123;</span><br><span class="line">template: `&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">  &lt;main&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/main&gt;</span><br><span class="line">  &lt;footer&gt;</span><br><span class="line">    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&lt;/div&gt;`</span><br><span class="line">&#125;);</span><br><span class="line">let vm = new Vue(&#123;</span><br><span class="line">el: &apos;#vm&apos;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>绑定在 <slot> 元素上的特性被称为插槽 prop。现在在父级作用域中，我们可以给 v-slot 带一个值来定义我们提供的插槽 prop 的名字</slot></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;vm&quot;&gt;</span><br><span class="line">&lt;comp-child&gt;</span><br><span class="line">&lt;template v-slot:header=&quot;demo&quot;&gt;</span><br><span class="line">            &lt;h1&gt;标题&lt;span&gt;&#123;&#123;demo.msg&#125;&#125;&lt;/span&gt;&lt;/h1&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">&lt;p&gt;正文&lt;/p&gt;</span><br><span class="line">    &lt;template v-slot:footer&gt;</span><br><span class="line">            &lt;p&gt;底部&lt;/p&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">&lt;/comp-child&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(&apos;comp-child&apos;, &#123;</span><br><span class="line">template: `&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;slot name=&quot;header&quot; msg=&quot;副标题&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">  &lt;main&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/main&gt;</span><br><span class="line">  &lt;footer&gt;</span><br><span class="line">    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&lt;/div&gt;`</span><br><span class="line">&#125;);</span><br><span class="line">let vm = new Vue(&#123;</span><br><span class="line">el: &apos;#vm&apos;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><ul><li>is特性</li><li><keep-alive> 元素<ul><li><keep-alive>要求被切换到的组件都有自己的名字，不论是通过组件的 name 选项还是局部/全局注册。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 失活的组件将会被缓存！--&gt;</span><br><span class="line">&lt;keep-alive&gt;</span><br><span class="line">  &lt;component v-bind:is=&quot;currentTabComponent&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></keep-alive></li></ul></keep-alive></li></ul><h3 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h3><blockquote><p>Vue 允许以一个工厂函数的方式定义组件，这个工厂函数会异步解析组件定义。Vue只有在这个组件需要被渲染的时候才会触发该工厂函数，且会把结果缓存起来供未来重渲染。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;async-example&apos;, function (resolve, reject) &#123;</span><br><span class="line">  setTimeout(function () &#123;</span><br><span class="line">    // 向 `resolve` 回调传递组件定义</span><br><span class="line">    resolve(&#123;</span><br><span class="line">      template: &apos;&lt;div&gt;I am async!&lt;/div&gt;&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p>directive</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 注册一个全局自定义指令 `v-focus`</span><br><span class="line">Vue.directive(&apos;focus&apos;,&#123;</span><br><span class="line">    // 当被绑定的元素插入到 DOM 中时……</span><br><span class="line">    inserted: function (el) &#123;</span><br><span class="line">        // 聚焦元素</span><br><span class="line">        el.focus()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>局部指令 directives选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">directives: &#123;</span><br><span class="line">    focus: &#123;</span><br><span class="line">    // 指令的定义</span><br><span class="line">    inserted: function (el) &#123;</span><br><span class="line">      el.focus()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><ul><li><code>bind</code>：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</li><li><code>inserted</code>：被绑定元素插入父节点时调用 (父节点存在即可调用，不必存在于document中)。</li><li><code>update</code>：被绑定元素插入父节点时调用，而不论绑定值是否变化。通过比较更新前后的值来忽略不必要的模板更新。</li><li><code>componentUpdated</code>：被绑定元素所在模板完成一次更新周期时调用。</li><li><code>unbind</code>：只调用一次，指令与元素解绑时调用。<h3 id="钩子函数参数"><a href="#钩子函数参数" class="headerlink" title="钩子函数参数"></a>钩子函数参数</h3></li><li><code>el</code>指令所绑定的元素，可以用来直接操作 DOM 。</li><li><code>binding</code><ul><li>name：指令名，不包括 v- 前缀。</li><li>value：指令的绑定值，例如：v-my-directive=”1 + 1” 中，绑定值为 2。</li><li>oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</li><li>expression：绑定值的字符串形式。例如 v-my-directive=”1 + 1” 中，表达式为 “1 + 1”。</li><li>arg：传给指令的参数。例如 v-my-directive:foo 中，arg的值为 “foo”。</li><li>modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象modifiers的值为 { foo: true, bar: true }。</li></ul></li><li><code>vnode</code>Vue 编译生成的虚拟节点。</li><li><code>oldVnode</code>上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</li></ul><blockquote><p>除了 el 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 dataset 来进行。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;baseexample&quot;&gt;</span><br><span class="line">  &lt;p&gt;Scroll down the page&lt;/p&gt;</span><br><span class="line">  &lt;p v-pin=&quot;200&quot;&gt;Stick me 200px from the top of the page&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">Vue.directive(&apos;pin&apos;, &#123;</span><br><span class="line">  bind: function (el, binding, vnode) &#123;</span><br><span class="line">    el.style.position = &apos;fixed&apos;</span><br><span class="line">    el.style.top = binding.value + &apos;px&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#baseexample&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h3><p>v-mydirective:[argument]=”value”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;dynamicexample&quot;&gt;</span><br><span class="line">  &lt;h3&gt;Scroll down inside this section ↓&lt;/h3&gt;</span><br><span class="line">  &lt;p v-pin:[direction]=&quot;200&quot;&gt;I am pinned onto the page at 200px to the left.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">Vue.directive(&apos;pin&apos;, &#123;</span><br><span class="line">  bind: function (el, binding, vnode) &#123;</span><br><span class="line">    el.style.position = &apos;fixed&apos;</span><br><span class="line">    var s = (binding.arg == &apos;left&apos; ? &apos;left&apos; : &apos;top&apos;)</span><br><span class="line">    el.style[s] = binding.value + &apos;px&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#dynamicexample&apos;,</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      direction: &apos;left&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git笔记和hexo笔记</title>
      <link href="/2019/07/03/live/study-git/"/>
      <url>/2019/07/03/live/study-git/</url>
      
        <content type="html"><![CDATA[<p>git常用命令只有几个，但由于不常使用，基本记不住，于是便总结为一个笔记，用时就打开复制一下。<br>之前我只是将git当代码仓库使用。昨天制作了基于hexo的git博客，今天又换了电脑。于是将所用命令再次整理下。</p><!-- 阅读更多 --><h2 id="目前我使用的命令步骤"><a href="#目前我使用的命令步骤" class="headerlink" title="目前我使用的命令步骤"></a>目前我使用的命令步骤</h2><ol start="0"><li>hexo new 文件名   </li><li>git add .</li><li>git commit -m “some descrption”</li><li>git push origin hexo</li><li>hexo g -d</li></ol><p>来源于最底下链接内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">迁移工作已完成，在两台电脑之间的同步操作如下：</span><br><span class="line"></span><br><span class="line">git pull从远程hexo分支拉取最新的环境文件到本地，可以理解为svn的更新操作。</span><br><span class="line">比如在公司写了博客，回家在电脑上也要写需要先执行这一步操作。</span><br><span class="line">文章写完，要发布时，需要先提交环境文件，再发布文章。</span><br><span class="line">按以下顺序执行命令：git add .、git commit -m &quot;some descrption&quot;、git push origin hexo、hexo g -d。</span><br><span class="line"></span><br><span class="line">作者：nikolausliu</span><br><span class="line">链接：https://www.jianshu.com/p/fceaf373d797/</span><br></pre></td></tr></table></figure><h2 id="git使用"><a href="#git使用" class="headerlink" title="git使用"></a>git使用</h2><p>拉项目到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 远程仓库地址</span><br></pre></td></tr></table></figure><p>初次创建仓库： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 在网上创建一个仓库，git clone 仓库地址</span><br><span class="line">2. 把项目复制进仓库名一样的文件夹内，cd 仓库名文件夹</span><br><span class="line">3. 将文件加入暂存区，git add . </span><br><span class="line">4. 暂存区内容提交到仓库，git commit -m &quot;注释内容&quot;</span><br><span class="line">5. 把本地仓库的项目推送到github上，git push -u origin master</span><br><span class="line">    // 第一次上传成功后可以去掉-u</span><br></pre></td></tr></table></figure><p>仓库里已有文件再提交：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. cd 仓库名文件夹</span><br><span class="line">2. 将文件加入暂存区，git add .     </span><br><span class="line">3. 暂存区内容提交到仓库，git commit -m &quot;注释内容&quot;</span><br><span class="line">4. 获取远程库与本地同步合并，git pull --rebase origin master</span><br><span class="line">5. 把本地库内容推送到远程库上，git push -u origin master</span><br><span class="line"> //第一次上传成功后可以去掉-u</span><br></pre></td></tr></table></figure><p>其他常用命令（git bash用的是linux的命令）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">初始化仓库：npm init</span><br><span class="line">新建文件夹：mkdir 文件夹名</span><br><span class="line">新建文件：touch 文件名</span><br></pre></td></tr></table></figure><h2 id="hexo使用"><a href="#hexo使用" class="headerlink" title="hexo使用"></a>hexo使用</h2><h3 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new 文件名</span><br></pre></td></tr></table></figure><h3 id="编写完后"><a href="#编写完后" class="headerlink" title="编写完后"></a>编写完后</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. hexo clean 清除缓存文件</span><br><span class="line">2. hexo g  生成文件</span><br><span class="line">3. hexo d 推送到远端github仓库</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/fceaf373d797/" target="_blank" rel="noopener">hexo博客同步管理及迁移</a>。<br>由于换成台式电脑，hexo迁移遇到一些问题，根据此链接慢慢解决了。</p><h2 id="Git和Github"><a href="#Git和Github" class="headerlink" title="Git和Github"></a>Git和Github</h2><ul><li>Git是版本控制系统</li><li>Github是在线的基于Git的代码托管服务。</li><li>NPM全称Node Package Manager，Node.js的包管理工具</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="github作为图床"><a href="#github作为图床" class="headerlink" title="github作为图床"></a>github作为图床</h3><blockquote><p>将网址中blob改为raw,就是图片外链地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记一：内置指令、选项等</title>
      <link href="/2019/07/02/live/study-vue/"/>
      <url>/2019/07/02/live/study-vue/</url>
      
        <content type="html"><![CDATA[<h2 id="1-初识Vue-js"><a href="#1-初识Vue-js" class="headerlink" title="1. 初识Vue.js"></a>1. 初识Vue.js</h2><h3 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h3><ul><li>解耦视图与数据</li><li>可复用的组件</li><li>前端路由</li><li>状态管理</li><li>虚拟DOM</li></ul><a id="more"></a><h3 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h3><ul><li>Model-View-ViewModel</li><li>视图-模型-视图模型</li></ul><h2 id="2-数据绑定"><a href="#2-数据绑定" class="headerlink" title="2. 数据绑定"></a>2. 数据绑定</h2><ul><li>v-model</li><li>el</li><li>data</li><li>filters 过滤器</li><li>v-pre 跳过编译<h3 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h3></li><li>created 实例创建完成后调用</li><li>mounted el挂到实例上后调用</li><li>beforeDestroy 实例销毁之前调用。主要用于解绑监听事件<br><img src="https://cn.vuejs.org/images/lifecycle.png" alt="生命周期钩子图"><h3 id="插值与表达式"><a href="#插值与表达式" class="headerlink" title="插值与表达式"></a>插值与表达式</h3></li><li>Mustache语法<ul><li>也可使用简单的JavaScript表达式<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3></li></ul></li><li>指令Directives，前缀v，当表达式的值<blockquote><p>当其表达式的值改变时，相应地将某些行为应用到DOM上</p></blockquote></li><li>v-bind 动态更新HTML元素上的属性</li><li>v-on 绑定事件监听器</li><li>methods<h3 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h3></li><li>v-bind简写为 :</li><li>v-on简写 为@</li></ul><h2 id="3-计算属性"><a href="#3-计算属性" class="headerlink" title="3. 计算属性"></a>3. 计算属性</h2><blockquote><p>以函数形式写在Vue实例内的computed选项内，最终返回计算后的结果</p><ul><li>每一个计算属性都包含一个getter和一个setter<ul><li>getter 默认，用于读取</li><li>setter 写入时触发</li></ul></li><li>computed依赖缓存，数据变化时才会重新取值</li><li>methods重新渲染时就会被调用</li></ul></blockquote><h2 id="4-指令"><a href="#4-指令" class="headerlink" title="4. 指令"></a>4. 指令</h2><ul><li>:class设置一个对象，动态切换class<ul><li>表达式每项为真时，对应类名就会加载</li><li>表达式过长或逻辑复杂时可绑定计算属性</li></ul></li><li>:class绑定一个数组，应用一个class列表<ul><li>可以在数组语法中使用对象语法</li></ul></li><li>v-cloak<ul><li>在Vue实例结束编译时从绑定的HTML上移除</li></ul></li><li>v-once<ul><li>只渲染一次，之后不再随数据的变化重新渲染</li></ul></li><li>v-if v-else-if v-else<ul><li>v-else-if要紧跟着v-if</li><li>v-else要紧跟着v-else-if或v-if</li></ul></li><li>v-show<ul><li>简单的CSS属性切换</li><li>表达式值为false时，元素会隐藏</li><li>v-show不能在<template>上使用</template></li></ul></li><li>v-for<ul><li>表达式结合in使用</li><li>遍历数组时，支持一个可选参数作为索引</li><li>遍历对象时，支持两个可选参数 键名 索引</li><li>push,pop,shift,unshift,splice,sort,reverse</li><li>filter,concat,slice</li></ul></li></ul><blockquote><p>修饰符：<br>stop 阻止事件冒泡 prevent capture self once</p></blockquote><blockquote><p>按键修饰符：<br>enter tab delete esc</p></blockquote><h2 id="5-表单与v-model"><a href="#5-表单与v-model" class="headerlink" title="5. 表单与v-model"></a>5. 表单与v-model</h2><blockquote><p>v-model 表单类元素的双向绑定数据<br>v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。</p></blockquote><p>v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：</p><ul><li>text 和 textarea 元素使用 value 属性和 input 事件；</li><li>checkbox 和 radio 使用 checked 属性和 change 事件；</li><li>select 字段将 value 作为 prop 并将 change 作为事件</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
