<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue学习笔记三：Render函数</title>
      <link href="/2019/07/10/live/study-vue2/"/>
      <url>/2019/07/10/live/study-vue2/</url>
      
        <content type="html"><![CDATA[<h2 id="Render函数"><a href="#Render函数" class="headerlink" title="Render函数"></a>Render函数</h2><p>渲染函数</p><h3 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h3><ul><li>Vue 通过建立一个虚拟 DOM 来追踪自己要如何改变真实 DOM，提升渲染性能。</li><li>Render函数用于实现虚拟DOM</li><li>Virtual Dom是一个轻量级的JavaScript对象，状态变化时进行Diff算法</li><li>Virtual Dom基于JavaScript计算</li><li>“虚拟节点 (virtual node)”，简写为“VNode”。“虚拟 DOM”是由 Vue 组件树建立起来的整个 VNode 树的称呼。</li></ul><!-- 阅读更多 --><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render: function (createElement) &#123;</span><br><span class="line">  return createElement(&apos;h1&apos;, this.blogTitle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="createElement"><a href="#createElement" class="headerlink" title="createElement"></a>createElement</h3><p>Render函数通过createElement参数来创建Virtual Dom</p><ul><li>参数一必选，HTML标签、组件或函数<ul><li>{String | Object | Function}</li></ul></li><li>参数二可选，对应属性的数据对象<ul><li>{Object}</li></ul></li><li>参数三可选，子节点<ul><li>{String | Array}</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">dateFormat YYYY-MM-DD</span><br><span class="line">section S1</span><br><span class="line">T1: 2014-01-01, 9d</span><br><span class="line">section S2</span><br><span class="line">T2: 2014-01-11, 9d</span><br><span class="line">section S3</span><br><span class="line">T3: 2014-01-02, 9d</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">A-&gt;&gt;B: How are you?</span><br><span class="line">B-&gt;&gt;A: Great!</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A--&gt;B</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记二：组件、自定义指令</title>
      <link href="/2019/07/06/live/study_vue1/"/>
      <url>/2019/07/06/live/study_vue1/</url>
      
        <content type="html"><![CDATA[<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul><li>component</li><li>组件名推荐使用小写加减号分割形式命名</li><li>组件注册必须在Vue实例申明之前</li><li>每个组件必须只有一个根元素</li></ul><!-- 阅读更多 --><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;my-component&apos;,&#123;</span><br><span class="line">    // 选项</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>局部注册组件使用components选项。只在实例作用域下有效。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let vm = new Vue(&#123;</span><br><span class="line">    el:&apos;#vm&apos;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        template:&apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><ul><li>name选项，可用来递归</li><li>data选项，必须是函数，返回对象数据</li><li>computed</li><li>methods</li><li>props选项，声明需要从父级接收的数据<ul><li>父组件向子组件传数据</li><li>值为字符串数组或对象</li><li>驼峰命名的props名称，DOM上改为短横分隔命名</li><li>值为对象时，k为名称，v为类型</li><li>v-bind动态绑定props值</li></ul></li></ul><h3 id="父子通信"><a href="#父子通信" class="headerlink" title="父子通信"></a>父子通信</h3><p>props</p><blockquote><p>在组件中，使用选项props来声明需要从父级接收的数据，props的值可以是两种，一种是字符串数组，一种是对象。</p></blockquote><blockquote><p>props中声明的数据与组件data函数return的数据的主要区别就是props的来自父级，而data中的是组件自己的数据，作用域是组件本身，这两种数据都可以在模板template及计算属性computed和方法methods中使用。</p></blockquote><blockquote><p>由于HTML特性不区分大小写，当使用DOM模板时，驼峰命名（）的props名称要转为短横分割命名（kebab-case）。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;vm&quot;&gt;</span><br><span class="line">&lt;huahua say=&quot;hello&quot;&gt;&lt;/huahua&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">Vue.component(&apos;huahua&apos;,&#123;</span><br><span class="line">props:[&apos;say&apos;],</span><br><span class="line">template:`&lt;div&gt;huahua:&#123;&#123;say&#125;&#125;&lt;/div&gt;`,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="子父通信"><a href="#子父通信" class="headerlink" title="子父通信"></a>子父通信</h3><p>.$emit(自定义的事件名,携带的数据)<br>.$on(自定义的事件名,回调函数)</p><blockquote><p>子组件用$emit()来触发事件，父组件用$on()来监听子组件的事件。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;vm&quot;&gt;</span><br><span class="line">&lt;for-show @show=&quot;show_num&quot;&gt;&lt;/for-show&gt;</span><br><span class="line">&lt;p v-if=&quot;iftrue&quot;&gt;余额：55元&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(&apos;for-show&apos;,&#123;</span><br><span class="line">template:`&lt;div&gt;&lt;button @click=&quot;on_click&quot;&gt;显示余额&lt;/button&gt;&lt;/div&gt;`,</span><br><span class="line">methods:&#123;</span><br><span class="line">on_click:function () &#123;</span><br><span class="line">this.$emit(&apos;show&apos;,&#123;a:2&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">let vm = new Vue(&#123;</span><br><span class="line">el:&apos;#vm&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">iftrue:false</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">show_num:function (data) &#123;</span><br><span class="line">console.log(data);</span><br><span class="line">this.iftrue = true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="非父子通信"><a href="#非父子通信" class="headerlink" title="非父子通信"></a>非父子通信</h3><p>父子、兄弟、跨级通信</p><ol><li>创建一个空的Vue实例，作为中央事件总线bus</li><li>全局定义组件</li><li>创建Vue实例，在mounted钩子函数里监听来自bus的事件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// 例子1</span><br><span class="line">&lt;div id=&quot;vm&quot;&gt;</span><br><span class="line">&lt;comp-txt&gt;&lt;/comp-txt&gt;</span><br><span class="line">&#123;&#123;message&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">let bus = new Vue();</span><br><span class="line">Vue.component(&apos;comp-txt&apos;,&#123;</span><br><span class="line">template:`&lt;div&gt;</span><br><span class="line">&lt;button @click=&quot;on_click&quot; &gt;传递事件&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;`,</span><br><span class="line">methods:&#123;</span><br><span class="line">on_click: function () &#123;</span><br><span class="line">bus.$emit(&apos;on_message&apos;,this.txt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">data: function () &#123;</span><br><span class="line">return &#123;</span><br><span class="line">txt:&apos;hello world&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">let vm = new Vue(&#123;</span><br><span class="line">el:&apos;#vm&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">message:&apos;&apos;</span><br><span class="line">&#125;,</span><br><span class="line">mounted: function () &#123;</span><br><span class="line">let _this = this;</span><br><span class="line">bus.$on(&apos;on_message&apos;,function(msg)&#123;</span><br><span class="line">_this.message=msg;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// 例子2</span><br><span class="line">&lt;div id=&quot;vm&quot;&gt;</span><br><span class="line">&lt;say&gt;&lt;/say&gt;</span><br><span class="line">&lt;saied&gt;&lt;/saied&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">let bus = new Vue();</span><br><span class="line">Vue.component(&apos;say&apos;,&#123;</span><br><span class="line">template:`&lt;div&gt;</span><br><span class="line">他在说:&lt;input type=&quot;text&quot; @keyup=&quot;saying&quot; v-model=&quot;he_say&quot; /&gt;</span><br><span class="line">&lt;/div&gt;`,</span><br><span class="line">methods:&#123;</span><br><span class="line">saying:function () &#123;</span><br><span class="line">bus.$emit(&apos;say_what&apos;,this.he_say);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">data: function () &#123;</span><br><span class="line">return &#123;</span><br><span class="line">he_say:&apos;&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">Vue.component(&apos;saied&apos;,&#123;</span><br><span class="line">template:`&lt;div&gt;</span><br><span class="line">他说了:&#123;&#123;msg&#125;&#125;</span><br><span class="line">&lt;/div&gt;`,</span><br><span class="line">data: function () &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg:&apos;&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted:function () &#123;</span><br><span class="line">let _this = this;</span><br><span class="line">bus.$on(&apos;say_what&apos;,function (data) &#123;</span><br><span class="line">// this指向bus</span><br><span class="line">_this.msg = data;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">let vm = new Vue(&#123;</span><br><span class="line">el:&apos;#vm&apos;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p>内容分发，用到slot</p><blockquote><p>Vue组件3个API来源：props传递数据、events触发事件、slot内容分发</p><ul><li>插槽内可以包含任何模板代码，包括 HTML</li><li>插槽内也可以包含其它的组件</li></ul></blockquote><blockquote><p>父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;vm&quot;&gt;</span><br><span class="line">&lt;comp-txt&gt;&lt;p&gt;父组件的内容&lt;/p&gt;&lt;/comp-txt&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(&apos;comp-txt&apos;,&#123;</span><br><span class="line">    template:`&lt;div&gt;&lt;slot&gt;&lt;p&gt;父组件没有内容&lt;/p&gt;&lt;/slot&gt;&lt;/div&gt;`</span><br><span class="line">&#125;);</span><br><span class="line">let vm = new Vue(&#123;</span><br><span class="line">    el:&apos;#vm&apos;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><p><slot> 元素有一个特殊的特性：name。这个特性可以用来定义额外的插槽。</slot></p><p>在向具名插槽提供内容的时候，可以在一个 <template> 元素上使用 v-slot 指令，并以 v-slot 的参数的形式提供其名称。</template></p><p><code>v-slot:</code> 有参数时可缩写为 <code>#</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;vm&quot;&gt;</span><br><span class="line">&lt;comp-child&gt;</span><br><span class="line">&lt;template #header&gt;</span><br><span class="line">            &lt;h1&gt;标题&lt;/h1&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;!-- &lt;h2 slot=&quot;header&quot;&gt;标题&lt;/h2&gt; --&gt;</span><br><span class="line">&lt;p&gt;正文&lt;/p&gt;</span><br><span class="line">&lt;p&gt;还是正文&lt;/p&gt;</span><br><span class="line">    &lt;template v-slot:footer&gt;</span><br><span class="line">            &lt;p&gt;底部&lt;/p&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;!-- &lt;p slot=&quot;footer&quot;&gt;底部&lt;/p&gt; --&gt;</span><br><span class="line">&lt;/comp-child&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(&apos;comp-child&apos;, &#123;</span><br><span class="line">template: `&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">  &lt;main&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/main&gt;</span><br><span class="line">  &lt;footer&gt;</span><br><span class="line">    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&lt;/div&gt;`</span><br><span class="line">&#125;);</span><br><span class="line">let vm = new Vue(&#123;</span><br><span class="line">el: &apos;#vm&apos;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>绑定在 <slot> 元素上的特性被称为插槽 prop。现在在父级作用域中，我们可以给 v-slot 带一个值来定义我们提供的插槽 prop 的名字</slot></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;vm&quot;&gt;</span><br><span class="line">&lt;comp-child&gt;</span><br><span class="line">&lt;template v-slot:header=&quot;demo&quot;&gt;</span><br><span class="line">            &lt;h1&gt;标题&lt;span&gt;&#123;&#123;demo.msg&#125;&#125;&lt;/span&gt;&lt;/h1&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">&lt;p&gt;正文&lt;/p&gt;</span><br><span class="line">    &lt;template v-slot:footer&gt;</span><br><span class="line">            &lt;p&gt;底部&lt;/p&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">&lt;/comp-child&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(&apos;comp-child&apos;, &#123;</span><br><span class="line">template: `&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;slot name=&quot;header&quot; msg=&quot;副标题&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">  &lt;main&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/main&gt;</span><br><span class="line">  &lt;footer&gt;</span><br><span class="line">    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&lt;/div&gt;`</span><br><span class="line">&#125;);</span><br><span class="line">let vm = new Vue(&#123;</span><br><span class="line">el: &apos;#vm&apos;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><ul><li>is特性</li><li><keep-alive> 元素<ul><li><keep-alive>要求被切换到的组件都有自己的名字，不论是通过组件的 name 选项还是局部/全局注册。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 失活的组件将会被缓存！--&gt;</span><br><span class="line">&lt;keep-alive&gt;</span><br><span class="line">  &lt;component v-bind:is=&quot;currentTabComponent&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></keep-alive></li></ul></keep-alive></li></ul><h3 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h3><blockquote><p>Vue 允许以一个工厂函数的方式定义组件，这个工厂函数会异步解析组件定义。Vue只有在这个组件需要被渲染的时候才会触发该工厂函数，且会把结果缓存起来供未来重渲染。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;async-example&apos;, function (resolve, reject) &#123;</span><br><span class="line">  setTimeout(function () &#123;</span><br><span class="line">    // 向 `resolve` 回调传递组件定义</span><br><span class="line">    resolve(&#123;</span><br><span class="line">      template: &apos;&lt;div&gt;I am async!&lt;/div&gt;&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p>directive</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 注册一个全局自定义指令 `v-focus`</span><br><span class="line">Vue.directive(&apos;focus&apos;,&#123;</span><br><span class="line">    // 当被绑定的元素插入到 DOM 中时……</span><br><span class="line">    inserted: function (el) &#123;</span><br><span class="line">        // 聚焦元素</span><br><span class="line">        el.focus()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>局部指令 directives选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">directives: &#123;</span><br><span class="line">    focus: &#123;</span><br><span class="line">    // 指令的定义</span><br><span class="line">    inserted: function (el) &#123;</span><br><span class="line">      el.focus()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><ul><li><code>bind</code>：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</li><li><code>inserted</code>：被绑定元素插入父节点时调用 (父节点存在即可调用，不必存在于document中)。</li><li><code>update</code>：被绑定元素插入父节点时调用，而不论绑定值是否变化。通过比较更新前后的值来忽略不必要的模板更新。</li><li><code>componentUpdated</code>：被绑定元素所在模板完成一次更新周期时调用。</li><li><code>unbind</code>：只调用一次，指令与元素解绑时调用。<h3 id="钩子函数参数"><a href="#钩子函数参数" class="headerlink" title="钩子函数参数"></a>钩子函数参数</h3></li><li><code>el</code>指令所绑定的元素，可以用来直接操作 DOM 。</li><li><code>binding</code><ul><li>name：指令名，不包括 v- 前缀。</li><li>value：指令的绑定值，例如：v-my-directive=”1 + 1” 中，绑定值为 2。</li><li>oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</li><li>expression：绑定值的字符串形式。例如 v-my-directive=”1 + 1” 中，表达式为 “1 + 1”。</li><li>arg：传给指令的参数。例如 v-my-directive:foo 中，arg的值为 “foo”。</li><li>modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象modifiers的值为 { foo: true, bar: true }。</li></ul></li><li><code>vnode</code>Vue 编译生成的虚拟节点。</li><li><code>oldVnode</code>上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</li></ul><blockquote><p>除了 el 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 dataset 来进行。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;baseexample&quot;&gt;</span><br><span class="line">  &lt;p&gt;Scroll down the page&lt;/p&gt;</span><br><span class="line">  &lt;p v-pin=&quot;200&quot;&gt;Stick me 200px from the top of the page&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">Vue.directive(&apos;pin&apos;, &#123;</span><br><span class="line">  bind: function (el, binding, vnode) &#123;</span><br><span class="line">    el.style.position = &apos;fixed&apos;</span><br><span class="line">    el.style.top = binding.value + &apos;px&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#baseexample&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h3><p>v-mydirective:[argument]=”value”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;dynamicexample&quot;&gt;</span><br><span class="line">  &lt;h3&gt;Scroll down inside this section ↓&lt;/h3&gt;</span><br><span class="line">  &lt;p v-pin:[direction]=&quot;200&quot;&gt;I am pinned onto the page at 200px to the left.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">Vue.directive(&apos;pin&apos;, &#123;</span><br><span class="line">  bind: function (el, binding, vnode) &#123;</span><br><span class="line">    el.style.position = &apos;fixed&apos;</span><br><span class="line">    var s = (binding.arg == &apos;left&apos; ? &apos;left&apos; : &apos;top&apos;)</span><br><span class="line">    el.style[s] = binding.value + &apos;px&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#dynamicexample&apos;,</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      direction: &apos;left&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git笔记和hexo笔记</title>
      <link href="/2019/07/03/live/study-git/"/>
      <url>/2019/07/03/live/study-git/</url>
      
        <content type="html"><![CDATA[<p>git常用命令只有几个，但由于不常使用，基本记不住，于是便总结为一个笔记，用时就打开复制一下。<br>之前我只是将git当代码仓库使用。昨天制作了基于hexo的git博客，今天又换了电脑。于是将所用命令再次整理下。</p><!-- 阅读更多 --><h2 id="目前我使用的命令步骤"><a href="#目前我使用的命令步骤" class="headerlink" title="目前我使用的命令步骤"></a>目前我使用的命令步骤</h2><ol><li>git add .</li><li>git commit -m “some descrption”</li><li>git push origin hexo</li><li>hexo g -d</li></ol><p>来源于最底下链接内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">迁移工作已完成，在两台电脑之间的同步操作如下：</span><br><span class="line"></span><br><span class="line">git pull从远程hexo分支拉取最新的环境文件到本地，可以理解为svn的更新操作。</span><br><span class="line">比如在公司写了博客，回家在电脑上也要写需要先执行这一步操作。</span><br><span class="line">文章写完，要发布时，需要先提交环境文件，再发布文章。</span><br><span class="line">按以下顺序执行命令：git add .、git commit -m &quot;some descrption&quot;、git push origin hexo、hexo g -d。</span><br><span class="line"></span><br><span class="line">作者：nikolausliu</span><br><span class="line">链接：https://www.jianshu.com/p/fceaf373d797/</span><br></pre></td></tr></table></figure><h2 id="git使用"><a href="#git使用" class="headerlink" title="git使用"></a>git使用</h2><p>拉项目到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 远程仓库地址</span><br></pre></td></tr></table></figure><p>初次创建仓库： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 在网上创建一个仓库，git clone 仓库地址</span><br><span class="line">2. 把项目复制进仓库名一样的文件夹内，cd 仓库名文件夹</span><br><span class="line">3. 将文件加入暂存区，git add . </span><br><span class="line">4. 暂存区内容提交到仓库，git commit -m &quot;注释内容&quot;</span><br><span class="line">5. 把本地仓库的项目推送到github上，git push -u origin master</span><br><span class="line">    // 第一次上传成功后可以去掉-u</span><br></pre></td></tr></table></figure><p>仓库里已有文件再提交：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. cd 仓库名文件夹</span><br><span class="line">2. 将文件加入暂存区，git add .     </span><br><span class="line">3. 暂存区内容提交到仓库，git commit -m &quot;注释内容&quot;</span><br><span class="line">4. 获取远程库与本地同步合并，git pull --rebase origin master</span><br><span class="line">5. 把本地库内容推送到远程库上，git push -u origin master</span><br><span class="line"> //第一次上传成功后可以去掉-u</span><br></pre></td></tr></table></figure><p>其他常用命令（git bash用的是linux的命令）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">初始化仓库：git init</span><br><span class="line">新建文件夹：mkdir 文件夹名</span><br><span class="line">新建文件：touch 文件名</span><br></pre></td></tr></table></figure><h2 id="hexo使用"><a href="#hexo使用" class="headerlink" title="hexo使用"></a>hexo使用</h2><h3 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new 文件名</span><br></pre></td></tr></table></figure><h3 id="编写完后"><a href="#编写完后" class="headerlink" title="编写完后"></a>编写完后</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. hexo clean 清除缓存文件</span><br><span class="line">2. hexo g  生成文件</span><br><span class="line">3. hexo d 推送到远端github仓库</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/fceaf373d797/" target="_blank" rel="noopener">hexo博客同步管理及迁移</a>。<br>由于换成台式电脑，hexo迁移遇到一些问题，根据此链接慢慢解决了。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记一：内置指令、选项等</title>
      <link href="/2019/07/02/live/study-vue/"/>
      <url>/2019/07/02/live/study-vue/</url>
      
        <content type="html"><![CDATA[<h2 id="1-初识Vue-js"><a href="#1-初识Vue-js" class="headerlink" title="1. 初识Vue.js"></a>1. 初识Vue.js</h2><h3 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h3><ul><li>解耦视图与数据</li><li>可复用的组件</li><li>前端路由</li><li>状态管理</li><li>虚拟DOM</li></ul><a id="more"></a><h3 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h3><ul><li>Model-View-ViewModel</li><li>视图-模型-视图模型</li></ul><h2 id="2-数据绑定"><a href="#2-数据绑定" class="headerlink" title="2. 数据绑定"></a>2. 数据绑定</h2><ul><li>v-model</li><li>el</li><li>data</li><li>filters 过滤器</li><li>v-pre 跳过编译<h3 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h3></li><li>created 实例创建完成后调用</li><li>mounted el挂到实例上后调用</li><li>beforeDestroy 实例销毁之前调用。主要用于解绑监听事件<br><img src="https://cn.vuejs.org/images/lifecycle.png" alt="生命周期钩子图"><h3 id="插值与表达式"><a href="#插值与表达式" class="headerlink" title="插值与表达式"></a>插值与表达式</h3></li><li>Mustache语法<ul><li>也可使用简单的JavaScript表达式<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3></li></ul></li><li>指令Directives，前缀v，当表达式的值<blockquote><p>当其表达式的值改变时，相应地将某些行为应用到DOM上</p></blockquote></li><li>v-bind 动态更新HTML元素上的属性</li><li>v-on 绑定事件监听器</li><li>methods<h3 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h3></li><li>v-bind简写为 :</li><li>v-on简写 为@</li></ul><h2 id="3-计算属性"><a href="#3-计算属性" class="headerlink" title="3. 计算属性"></a>3. 计算属性</h2><blockquote><p>以函数形式写在Vue实例内的computed选项内，最终返回计算后的结果</p><ul><li>每一个计算属性都包含一个getter和一个setter<ul><li>getter 默认，用于读取</li><li>setter 写入时触发</li></ul></li><li>computed依赖缓存，数据变化时才会重新取值</li><li>methods重新渲染时就会被调用</li></ul></blockquote><h2 id="4-指令"><a href="#4-指令" class="headerlink" title="4. 指令"></a>4. 指令</h2><ul><li>:class设置一个对象，动态切换class<ul><li>表达式每项为真时，对应类名就会加载</li><li>表达式过长或逻辑复杂时可绑定计算属性</li></ul></li><li>:class绑定一个数组，应用一个class列表<ul><li>可以在数组语法中使用对象语法</li></ul></li><li>v-cloak<ul><li>在Vue实例结束编译时从绑定的HTML上移除</li></ul></li><li>v-once<ul><li>只渲染一次，之后不再随数据的变化重新渲染</li></ul></li><li>v-if v-else-if v-else<ul><li>v-else-if要紧跟着v-if</li><li>v-else要紧跟着v-else-if或v-if</li></ul></li><li>v-show<ul><li>简单的CSS属性切换</li><li>表达式值为false时，元素会隐藏</li><li>v-show不能在<template>上使用</template></li></ul></li><li>v-for<ul><li>表达式结合in使用</li><li>遍历数组时，支持一个可选参数作为索引</li><li>遍历对象时，支持两个可选参数 键名 索引</li><li>push,pop,shift,unshift,splice,sort,reverse</li><li>filter,concat,slice</li></ul></li></ul><blockquote><p>修饰符：<br>stop 阻止事件冒泡 prevent capture self once</p></blockquote><blockquote><p>按键修饰符：<br>enter tab delete esc</p></blockquote><h2 id="5-表单与v-model"><a href="#5-表单与v-model" class="headerlink" title="5. 表单与v-model"></a>5. 表单与v-model</h2><blockquote><p>v-model 表单类元素的双向绑定数据<br>v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。</p></blockquote><p>v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：</p><ul><li>text 和 textarea 元素使用 value 属性和 input 事件；</li><li>checkbox 和 radio 使用 checked 属性和 change 事件；</li><li>select 字段将 value 作为 prop 并将 change 作为事件</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
